<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC " -//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="goods">
	
	<select id="getKeepList" parameterType="_string" resultType="GoodsDto"> <!--사진API로?--><!-- 5P 사진을 포함한 찜목록을 가져옴 -->
		select goods_id,user_id,title,price,status,created_at 
		from goods
		where goods_id IN(select goods_id from wishlist where user_id=#{userId}) and active_status="Y" and status!=4
		order by created_at DESC
	</select>
	
	<select id="updateViewCount"> <!-- 상품글 조회수 +1 -->
		update goods set view_count=view_count+1
	</select>
	
	<select id="getFavoriteList" parameterType="_string" resultType="GoodsDto"> <!--사진API로?--><!-- 6P 사진을 포함한 모아보기목록 가져옴 -->
		select goods_id,user_id,title,price,status,created_at 
		from goods g
		where user_id IN(select target_id from favorite_user where user_id=#{userId}) and active_status="Y" and status!=4
		order by created_at DESC
	</select>
	
	<select id="getOnSaleList" parameterType="string" resultType="GoodsDto">	<!--10P 판매중 + 예약중 불러오기 -->
		select goods_id,title,price,status 
		from goods 
		where user_id=#{userId} and status IN(1,2) and active_status="Y" 
		order by refreshed_at DESC;
	</select>
	
	<select id="getSoldOutList" parameterType="string" resultType="GoodsDto">	<!--10P 거래완료 판매내역 가지고오기 -->
		select goods_id,title,price,status 
		from goods 
		where user_id=#{user_id} and status IN(3) and active_status="Y" 
		order by refreshed_at DESC;
	</select>
	
	<select id="getHideList" parameterType="string" resultType="GoodsDto">	<!--10P 숨김중인 판매내역 가져오기 -->
		select goods_id,title,price,status 
		from goods 
		where user_id=#{userId} and status IN(4) and active_status="Y" 
		order by refreshed_at DESC;
	</select>
		
<!-- 	<select id="get">		카테고리별 상품글 
		goods_id,user_id,title,status,price,view_count,description,safe_trading_yn,created_at from goods
		where category_id=1 and active_status="Y" and and status!=4
</select> -->

<!-- 	<select id="get">		카테고리별 검색 상품글 dao에서 '%'처리하여 가져오기
		goods_id,user_id,title,status,price,view_count,description,safe_trading_yn,created_at from goods
		where category_id=1 and title like #{searchWord} and active_status="Y" and and status!=4
</select> -->

<!-- 	<select id="get">		카테고리별 상품글 + 가격범위
		goods_id,user_id,title,status,price,view_count,description,safe_trading_yn,created_at from goods
		where category_id=1 and active_status="Y" and and status!=4
</select> -->

<!-- 	<select id="get">		카테고리별 검색 상품글 dao에서 '%'처리하여 가져오기 + 가격범위
		goods_id,user_id,title,status,price,view_count,description,safe_trading_yn,created_at
		,dong_id,lat,lng from goods
		where category_id=1 and title like #{searchWord} and active_status="Y" and and status!=4
</select> -->

		<insert id="insertGoods">	<!-- 24P 상품글 등록 -->
			insert into goods 
			(goods_id,user_id,category_id,dong_id,title,price,description,safetrading_yn,lat,lng) 
			values(goods_id_sequence.nextval,#{userId},#{categoryId},#{dongId},#{title},#{price},#{description},#{safetradingYN},#{lat},#{lng})
		</insert>

		<select id="getGoodsInfo" parameterType="_int" resultType="GoodsInfoDto"> <!--23P 상품글 상세조회  -->
			select goods_id,user_id,category_id,title,status,price,view_count,description,created_at,safe_trading_yn
			,dong_id,lat,lng,nickname,rating_score
			from goods join user using (user_id) 
			where goods_id=#{goodsId} and active_status='Y'
		</select>
		
		<update id="updateStatus" parameterType="string"> <!-- 23P 상품상태 -->
			update goods set status=#{status} where goods_id=#{goodsId}
		</update>
		
<!-- 		<select id="getFourGoodsList">	22P 해당 계정의 상품글을 등록일자 내림차순으로 4개까지 가져오기
			select goods_id, title, price from 
			(select goods_id, title, price from goods where user_id = #{userId} order by created_at desc)
			and and status!=4
			where ROWNUM <=4	
		</select> -->
	
		<insert id="insertWishList">	<!-- 23P 찜하기 -->	
			insert into wishlist values(#{goodsId},#{userId},"")
		</insert>
		
		<update id="updateGoods" parameterType="GoodsDto"> <!-- 25P 상품글 수정 -->
			update goods 
			set title=#{title},category_id=#{category_id},
			price=#{price},description=#{description}
			,safe_trading_yn=#{safeTradingYN}
			,dong_id=#{dong_id},lat=#{lat},lng=#{lng}
			where goods_id=#{goodsId}
		</update>

		<delete id="deleteGoods" parameterType="_int"> <!-- 상품글 삭제는 active_status='N'으로 처리함. -->
			update goods set active_status="N" 
			where goods_id=#{goodsId}
		</delete>
</mapper>
