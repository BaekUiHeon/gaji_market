<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC " -//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="goods">



	<select id="getGoodsListInfo" parameterType="map"
		resultType="kh.spring.gaji.goods.model.dto.GoodsListInfoDto">
		select count(*) totalCnt,min(price) bottomPrice,avg(price)
		averagePrice,max(price) topPrice from goods where status!=4 and
		active_status='Y'
		<if test="category!=-1">
			and category_id=#{category}
		</if>
		<if test='searchWord!=""'>
			and title like #{searchWord}
		</if>
		<choose>
			<when test="priceCeiling==100000">
				and price &lt;= 100000
			</when>
			<when test="priceCeiling==300000">
				and price &gt;= 100000 and price &lt;= 300000
			</when>
			<when test="priceCeiling==500000">
				and price &gt;= 300000 and price &lt;= 500000
			</when>
			<when test="priceCeiling==700000">
				and price &gt;= 500000
			</when>
		</choose>
		<if test="dongId!=-1">
			and dong_id=#{dongId}
		</if>
	</select>

	<select id="getGoodsList" parameterType="map"
		resultType="GoodsListDto">
		select list2.*,(select f.url from goods_file f where
		f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select
		list.*,rownum rn from(
		(select
		g.view_count,g.title,g.price,g.goods_Id,u.nickname,g.status,g.safe_Trading_Yn,d.dong_Name,g.refreshed_at,
		g.created_at,

		(select count(*) from wishList w where
		g.goods_id=w.goods_id) likeCount
		from goods g join users u
		using(user_id) join dong d on g.dong_id=d.dong_id
		where status!=4 and
		active_status='Y'
		<if test="category!=-1">
			and category_id=#{category}
		</if>
		<if test='searchWord!=""'>
			and title like #{searchWord}
		</if>
		<choose>
			<when test="priceCeiling==100000">
				and price &lt;= 100000
			</when>
			<when test="priceCeiling==300000">
				and price &gt;= 100000 and price &lt;= 300000
			</when>
			<when test="priceCeiling==500000">
				and price &gt;= 300000 and price &lt;= 500000
			</when>
			<when test="priceCeiling==700000">
				and price &gt;= 500000
			</when>
		</choose>
		<if test="dongId!=-1">
			and g.dong_id=#{dongId}
		</if>
		<choose>
			<when test="sort==1">
				order by likeCount desc, g.refreshed_at desc
			</when>
			<when test="sort==3">
				order by price asc, g.refreshed_at desc
			</when>
			<when test="sort==4">
				order by price desc, g.refreshed_at desc
			</when>
			<otherwise>
				order by g.refreshed_at desc
			</otherwise>
		</choose>
		)
		list)
		)list2 where list2.rn between #{startRownum} and #{endRownum}
	</select>

	<insert id="insertGoods" parameterType="GoodsDto">	<!-- 24P 상품글 등록 -->
		insert into goods
		(goods_id,user_id,category_id,title,dong_id,price,description,safe_trading_yn,lat,lng)
		values(goods_id_sequence.nextval,#{userId},#{categoryId},#{title},#{dongId},#{price},#{description},#{safeTradingYn},#{lat},#{lng})
	</insert>

	<select id="getGoodsInfo" parameterType="_int" resultType="GoodsInfoDto"> <!--23P 상품글 상세조회 -->
		select
		goods_id,user_id,category_id,category_name,title,status,price,view_count,description,g.created_at,safe_trading_yn
		,g.dong_id,lat,lng,nickname,rating_score,
		 (select count(user_id) from wishlist w where w.goods_id = g.goods_id) wishcount
		from goods g join
		users u using (user_id)
		JOIN CATEGORY c USING (category_id)
		where goods_id=#{goodsId} and
		active_status='Y'and status != 4
	</select>
	
	<select id="goodsUserInfo" parameterType="_int" resultType="GoodsInfoDto"> <!-- 해당 상품작성자의 후기수, 안전거래횟수, 판매상품수 -->
		select 
   	 (SELECT COUNT(dr.goods_id) FROM deal_review dr WHERE dr.user_id = g.user_id) reviewcount,
   	 (SELECT COUNT(*) FROM safe_trading st WHERE st.goods_id IN (SELECT goods_id
   	 FROM goods WHERE user_id = g.user_id)) safetradecount,
   	 (select Count(goods_id) from goods where user_id = g.user_id) sellgoods
   	 from goods g
   	 join users u on u.user_id = g.user_id
    where g.goods_id = #{goodsId}
	</select>

	<select id="goodsUrl" parameterType="_int" resultType="GoodsInfoDto"> <!-- 상품 이미지 swiper적용할부분과 후기 , 판매상품갯수, 안전거래횟수 -->
		SELECT url
		FROM goods g
		JOIN goods_file gf ON g.goods_id = gf.goods_id
		WHERE g.goods_id = #{goodsId}
	</select>
	
	<select id="userGoodsList" parameterType="_int" resultType="GoodsInfoDto"> <!-- 해당 글의 작성자의 상품리스트 -->
		SELECT g.goods_id, g.title, (SELECT gf.url FROM goods_file gf WHERE gf.goods_id = g.goods_id AND ROWNUM = 1) AS url, g.price
		FROM goods g
		WHERE g.user_id = (SELECT user_id FROM goods WHERE goods_id = #{goodsId})
	</select>

	<update id="updateViewCount" parameterType="_int"> <!-- 상품글 조회수 +1 -->
		update goods set view_count=view_count+1 where goods_id = #{goodsId}
	</update>

	<select id="checkWiskList" parameterType="map" resultType="WishListDto"> <!-- 해당 유저 찜목록 조회 -->
		select GOODS_ID, USER_ID, CREATED_AT from wishlist where user_id = #{userId} and goods_id = #{goodsId}
	</select>
	
	<select id="checkFavoriteUser" parameterType="map" resultType="FavoriteUserDto">
		select user_id, target_id from favorite_user where user_id = #{userId} and target_id = #{targetId}
	</select>
	
	<update id="pullUpGoods" parameterType="_int" > <!-- 상품 끌어올림 -->
		UPDATE goods
		SET REFRESHED_AT = SYSDATE
		WHERE (SYSDATE - 1) >= REFRESHED_AT AND goods_id = #{goodsID}
	</update>
	
	<delete id="deleteGoods" parameterType="_int"> <!-- 상품글 삭제는 active_status='N'으로 처리함. -->
		update goods set active_status='N'
		where goods_id=#{goodsId}
	</delete>
	
	<update id="updateStatus" parameterType="map"> <!-- 23P 상품상태변경 -->
		update goods set status=#{status} where goods_id=#{goodsId}
	</update>


	<select id="getGuDongInfo" parameterType="string"
		resultType="kh.spring.gaji.goods.model.dto.GuDongInfoDto">
		select u.dong_id, d.dong_name, g.gu_id, g.gu_name
		from users
		u join dong d on u.dong_Id=d.dong_Id join gu g on
		d.gu_Id=g.gu_Id
		where
		user_id=#{userId}
	</select>

	<update id="updateGoods" parameterType="GoodsDto"> <!-- 25P 상품글 수정 -->
		update goods
		set title=#{title},category_id=#{category_id},
		price=#{price},description=#{description}
		,safe_trading_yn=#{safeTradingYN}
		,dong_id=#{dong_id},lat=#{lat},lng=#{lng}
		where goods_id=#{goodsId}
	</update>

	
	
	<select id="getMainGoods" parameterType="_int" resultType="MainGoodsDto">
		select list2.* from(
		(select rownum rn,list1.* from
		(select goods_id,title,price,(select url from goods_file f where g.goods_id=f.goods_id and rownum between 0 and 1) url
		from goods g 
		<choose>
			<when test="category==1">
				where category_id=1
			</when>
			<when test="category==2">
				where category_id=2
			</when>
			<when test="category==3">
				where category_id=3
			</when>
			<when test="category==4">
				where category_id=4
			</when>
			<when test="category==5">
				where category_id=5
			</when>
			<when test="category==6">
				where category_id=6
			</when>
		</choose>
		and status!=4 and
		active_status='Y'
		order by created_at desc) list1) list2) where rn &lt; 7
	</select>
	
	<!--해당유저 상품조회-->
	<select id="getOnsaleTotalCnt" resultType="_int">
		select count(*) from goods where user_Id=#{userId} and status!=4
	</select>
	
	<select id="getSearchOnsaleTotalCnt" parameterType="map" resultType="_int">
		select count(*) from goods where user_Id=#{userId} and title like #{searchWord} and status!=4
	</select>
	
	
	<select id="getOnsaleList" parameterType="map" resultType="MyGoodsListDto">	<!--해당유저 상품리스트 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id=#{userId} and status!=4 and active_status='Y' 
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getSearchOnsaleList" parameterType="map" resultType="MyGoodsListDto">	<!--해당유저 상품리스트-->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id=#{userId} and status!=4 and active_status='Y' and title like #{searchWord}
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	<!--  -->

</mapper>
