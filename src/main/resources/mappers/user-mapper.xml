<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC " -//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="user">
	
	
	
	
	<select id="checkIdForSafeSeller" parameterType="string" resultType="string">
		select user_id from goods join safe_trading using (goods_Id)
		where transaction_Id=#{transactionId}
	</select>
	
	<select id="checkIdForSafe" parameterType="string" resultType="string">
		select buyer_id from safe_trading where transaction_id=#{transactionId}
	</select>
	
	<select id="checkTradingStatus" parameterType="map" resultType="string">	<!-- 리뷰를 위한 안전거래상태 체크 -->
		select goods_id from safe_trading where transaction_id=#{transactionId} and buyer_id=#{userId} and trading_status=4
	</select>
	
	<select id="checkReview" parameterType="map" resultType="_int">	<!-- 해당 상품에대한 리뷰가 존재하는지를 체크함 -->
		select count(*) from deal_review where goods_id=#{goodsId} and user_id=#{userId}
	</select>
	
	<select id="getSafeTotalCnt" parameterType="string" resultType="int">	<!-- 9P 아이디에 해당하는 안전거래 구매 총갯수 -->
		select count(*) from safe_trading where buyer_id=#{buyerId}
	</select>
	
	<select id="getSearchSafeTotalCnt" parameterType="string" resultType="int">	<!-- 9P 아이디에 해당하며 검색어에 부합하는 안전거래 구매 총갯수  -->
		select count(*) from safe_trading where buyer_id=#{buyerId} and goods_title like #{searchWord}
	</select>
	
	<select id="getSafePurchaseList" parameterType="map" resultType="UserSafeTradingDto">	<!-- 9P 안전거래 구매내역(회원) 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url 
		from 
		(select list.*,rownum rn from(
		(select goods_Id,transaction_id,goods_title,trading_status,s.price,to_char(trading_date, 'YYYY-MM-DD HH24:MI:SS') trading_date
		from safe_trading s join goods g using (goods_id)
		where buyer_id=#{buyerId} 
		order by trading_date desc)
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getSearchSafePurchaseList" parameterType="map" resultType="UserSafeTradingDto">	<!-- 9P 안전거래 검색어에 따른 구매내역(회원) 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from 
		(select list.*,rownum rn from(
		(select goods_Id,transaction_id,goods_title,trading_status,s.price,to_char(trading_date, 'YYYY-MM-DD HH24:MI:SS') trading_date
		from safe_trading s join goods g using (goods_id)
		where buyer_id=#{buyerId} and goods_title like #{searchWord}
		order by trading_date desc)
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	
	
	<select id="getSellerSafeTotalCnt" parameterType="string" resultType="int">	<!-- 9P 아이디에 해당하는 안전거래 구매 총갯수 goodsget-->
		select count(*) from safe_trading join goods using (goods_id) where user_id=#{userId}
	</select>
	
	<select id="getSearchSellerSafeTotalCnt" parameterType="string" resultType="int">	<!-- 9P 아이디에 해당하며 검색어에 부합하는 안전거래 구매 총갯수  -->
		select count(*) from safe_trading join goods using (goods_id) where user_id=#{userId} and goods_title like #{searchWord}
	</select>
	
	<select id="getSellerSafePurchaseList" parameterType="map" resultType="UserSafeTradingDto">	<!-- 9P 안전거래 구매내역(회원) 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from 
		(select list.*,rownum rn from(
		(select goods_id,transaction_id,goods_title,trading_status,s.price,to_char(trading_date, 'YYYY-MM-DD HH24:MI:SS') trading_date
		from safe_trading s join goods g using (goods_id)
		where user_id=#{userId} 
		order by trading_date desc)
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	<select id="getSearchSellerSafePurchaseList" parameterType="map" resultType="UserSafeTradingDto">	<!-- 9P 안전거래 검색어에 따른 구매내역(판매자) 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from 
		(select list.*,rownum rn from(
		(select goods_Id,transaction_id,goods_title,trading_status,s.price,to_char(trading_date, 'YYYY-MM-DD HH24:MI:SS') trading_date
		from safe_trading s join goods g using (goods_id)
		where user_Id=#{userId} and goods_title like #{searchWord}
		order by trading_date desc)
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getInfaceTotalCnt" parameterType="string" resultType="int">
		select count(*) 
		from in_face_trading
		where buyer_id=#{buyerId}
	</select>
	
	<select id="getSearchInfaceTotalCnt" parameterType="map" resultType="int">
		select count(*) 
		from in_face_trading
		where buyer_id=#{buyerId} and goods_title like #{searchWord}
	</select>

	<select id="getInfacePurchaseList" parameterType="map" resultType="InFaceTradingDto"> <!-- 9P 직거래 구매내역(회원) 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*, rownum rn from(
		(select goods_id,in_face_trading_id,goods_title,trading_status,i.price,to_char(trading_date, 'YYYY-MM-DD HH24:MI:SS') trading_date
		from in_face_trading i join goods g using (goods_id)
		where buyer_id=#{buyerId} 
		order by trading_date desc) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
		<select id="getSearchInfacePurchaseList" parameterType="map" resultType="InFaceTradingDto"> <!-- 9P 직거래 구매내역(회원) 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*, rownum rn from(
		(select goods_id,in_face_trading_id,goods_title,trading_status,i.price,to_char(trading_date, 'YYYY-MM-DD HH24:MI:SS') trading_date
		from in_face_trading i join goods g using (goods_id)
		where buyer_id=#{buyerId} and goods_title like #{searchWord} 
		order by trading_date desc) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getSellerInfaceTotalCnt" parameterType="string" resultType="int">
		select count(*) 
		from in_face_trading join goods using (goods_id)
		where user_id=#{userId}
	</select>
	
	<select id="getSearchSellerInfaceTotalCnt" parameterType="map" resultType="int">
		select count(*) 
		from in_face_trading join goods using (goods_id)
		where user_id=#{userId} and goods_title like #{searchWord}
	</select>

	<select id="getSellerInfacePurchaseList" parameterType="map" resultType="InFaceTradingDto"> <!-- 9P 직거래 구매내역(회원) 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*, rownum rn from(
		(select goods_id,in_face_trading_id,goods_title,trading_status,i.price,to_char(trading_date, 'YYYY-MM-DD HH24:MI:SS') trading_date
		from in_face_trading i join goods g using (goods_id)
		where user_id=#{userId}
		order by trading_date desc) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getSearchSellerInfacePurchaseList" parameterType="map" resultType="InFaceTradingDto"> <!-- 9P 직거래 구매내역(회원) 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*, rownum rn from(
		(select goods_id,in_face_trading_id,goods_title,trading_status,i.price,to_char(trading_date, 'YYYY-MM-DD HH24:MI:SS') trading_date
		from in_face_trading i join goods g using (goods_id)
		where user_id=#{userId} and goods_title like #{searchWord} 
		order by trading_date desc) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getOnsaleTotalCnt" resultType="_int">
		select count(*) from goods where user_Id=#{userId} and status IN(1,2)
	</select>
	
	<select id="getSearchOnsaleTotalCnt" parameterType="map" resultType="_int">
		select count(*) from goods where user_Id=#{userId} and title like #{searchWord} and status IN(1,2)
	</select>
	
	
	<select id="getOnsaleList" parameterType="map" resultType="MyGoodsListDto">	<!--10P 판매중 + 예약중 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(refreshed_at, 'YYYY-MM-DD HH24:MI:SS') refreshed_at,to_char(g.created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id=#{userId} and status IN(1,2) and active_status='Y' 
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getSearchOnsaleList" parameterType="map" resultType="MyGoodsListDto">	<!--10P 판매중 + 예약중 불러오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(refreshed_at, 'YYYY-MM-DD HH24:MI:SS') refreshed_at,to_char(g.created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id=#{userId} and status IN(1,2) and active_status='Y' and title like #{searchWord}
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getKeepUsedTotalCnt" parameterType="string" resultType="_int"> 	<!--찜 목록 가져오기 -->
		select count(*) from goods where goods_id IN(select goods_id from wishlist where user_id=#{userId}) and status IN(1,2) and active_status='Y' order by created_at
	</select>
	
	<select id="getSearchKeepUsedTotalCnt" parameterType="map" resultType="_int"> 	<!--찜 목록 가져오기 -->
		select count(*) from goods where goods_id IN(select goods_id from wishlist where user_id=#{userId}) and title like #{searchWord} and status IN(1,2)
	</select>
	
	<select id="getKeepUsedList" parameterType="map" resultType="MyGoodsListDto">	<!--찜 목록 가져오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where goods_id IN(select goods_id from wishlist where user_id=#{userId}) and status IN(1,2) and active_status='Y' 
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getSearchKeepUsedList" parameterType="map" resultType="MyGoodsListDto">	<!--찜 목록 가져오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where goods_id IN(select goods_id from wishlist where user_id=#{userId}) and status IN(1,2) and active_status='Y' and title like #{searchWord}
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<!--  -->
	<select id="getKeepUsersTotalCnt" parameterType="string" resultType="_int"> 	<!--모아보기 목록 가져오기 -->
		select count(*) from goods where user_id IN(select target_id from favorite_user where user_id=#{userId}) and status IN(1,2) and active_status='Y' order by created_at
	</select>
	
	<select id="getSearchKeepUsersTotalCnt" parameterType="map" resultType="_int"> 	<!--모아보기 목록 가져오기 -->
		select count(*) from goods where user_id IN(select target_id from favorite_user where user_id=#{userId}) and title like #{searchWord} and status IN(1,2) and active_status='Y'
	</select>
	
	<select id="getKeepUsersList" parameterType="map" resultType="MyGoodsListDto">	<!--모아보기 목록 가져오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id IN(select target_id from favorite_user where user_id=#{userId}) and status IN(1,2) and active_status='Y' 
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getSearchKeepUsersList" parameterType="map" resultType="MyGoodsListDto">	<!--모아보기 목록 가져오기 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name 
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id IN(select target_id from favorite_user where user_id=#{userId}) and status IN(1,2) and active_status='Y' and title like #{searchWord}
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	<!--  -->
	
	
	<select id="getClosedTotalCnt" resultType="_int">
		select count(*) from goods where user_Id=#{userId} and status IN(3) and active_status='Y'
	</select>
	
	<select id="getSearchClosedTotalCnt" parameterType="map" resultType="_int">
		select count(*) from goods where user_Id=#{userId} and title like #{searchWord} and status IN(3) and active_status='Y'
	</select>
	
	
	<select id="getClosedList" parameterType="map" resultType="MyGoodsListDto">	<!--거래완료 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(refreshed_at, 'YYYY-MM-DD HH24:MI:SS') refreshed_at,to_char(g.created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name 
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id=#{userId} and status IN(3) and active_status='Y' 
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getSearchClosedList" parameterType="map" resultType="MyGoodsListDto">	<!--거래완료 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(refreshed_at, 'YYYY-MM-DD HH24:MI:SS') refreshed_at,to_char(g.created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name 
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id=#{userId} and status IN(3) and active_status='Y' and title like #{searchWord}
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	
	<select id="getHideTotalCnt" resultType="_int">
		select count(*) from goods where user_Id=#{userId} and status IN(4) and active_status='Y' <!--숨김 -->
	</select>
	
	<select id="getSearchHideTotalCnt" parameterType="map" resultType="_int"> <!--숨김 -->
		select count(*) from goods where user_Id=#{userId} and title like #{searchWord} and status IN(4) and active_status='Y'
	</select>
	
	
	<select id="getHideList" parameterType="map" resultType="MyGoodsListDto">	<!--숨김 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(refreshed_at, 'YYYY-MM-DD HH24:MI:SS') refreshed_at,to_char(g.created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name 
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id=#{userId} and status IN(4) and active_status='Y' 
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<select id="getSearchHideList" parameterType="map" resultType="MyGoodsListDto">	<!--숨김 -->
		select list2.*,(select count(*) from wishlist w where w.goods_Id=list2.goods_Id) wishCount 
		,(select url from goods_file f where f.goods_id=list2.goods_id and rownum between 0 and 1) url from
		(select list.*,rownum rn from(
		(select to_char(refreshed_at, 'YYYY-MM-DD HH24:MI:SS') refreshed_at,to_char(g.created_at, 'YYYY-MM-DD HH24:MI:SS') created_at,goods_id,title,price,status,view_Count,(select dong_name from dong d where d.dong_Id=g.dong_Id) dong_name 
		,(select nickname from users u where u.user_id=g.user_id) nickname
		from goods g
		where user_id=#{userId} and status IN(4) and active_status='Y' and title like #{searchWord}
		order by refreshed_at DESC) 
		list)
		) list2 where rn between #{startRownum} and #{endRownum}
	</select>
	
	<insert id="insertWishList" parameterType="map">	<!-- 23P 찜하기 -->	
		insert into wishlist values(#{goodsId},#{userId}, default)
	</insert>
	
	<delete id="deleteWishList" parameterType="map">	<!-- 찜해제 -->
		DELETE FROM wishlist WHERE user_id = #{userId} AND goods_id = #{goodsId}
	</delete>
	
	<insert id="addFavoriteUser" parameterType="map">	<!-- 로그인 유저 글등록유저 좋아요 추가 -->
		 insert into favorite_user (user_Id, target_Id, created_Date) values (#{userId}, #{targetId}, default)
	</insert>
	
	<delete id="deleteFavoriteUser" parameterType="map"> <!--  로그인 유저 글등록유저 좋아요 제거 -->
		DELETE FROM favorite_user WHERE user_id = #{userId} AND target_id = #{targetId}
	</delete>

	<select id="getProfile" parameterType="string" resultType="UserProfileDto">	<!-- 프로필을 가져올때 유저주소 전부를 가져옴 -->
		select name,rating_score,nickname,mobile_number,role from user us where user_id=#{userId}
	</select>
	
	<select id="getAddress" parameterType="string" resultType="UserAddressDto"> <!-- 사용자 주소를 가져옴 -->
		select detail_address,post_code,road_address,address,address_nickname,address_no
		from user_address 
		where user_id=#{userId}
		order by address_no
	</select>
	
	<update id="updateMainAddressNo" parameterType="string">	<!-- 대표주소를 변경하기위해 주소순서를 하나씩 뒤로 민다 -->
		update user_address set address_no=address_no+1 where user_id=#{userId}
	</update>
	
	<update id="updateMainAddress" parameterType="map">	<!--주소순서를 1로 바꿈으로써 대표주소 변경 -->
		update user_address set address_no=1 where user_id=#{userId} and address_no=#{addressNo}+1
	</update>
	
	<update id="updateMainAddress2" parameterType="map"> <!-- 대표주소가 된 주소보다 높은순서들을 다시 1씩 내려주기. -->
		update user_address set address_no=address_no+1 where user_id=#{userId} and address_no &gt; #{addressNo}
	</update>
	
	<insert id="insertAddress" parameterType="UserInsertAddressDto">	<!-- 새로입력된 주소를 count+1 주소순서에 추가한다 -->
		insert into user_address values(#{detailAddress},#{postCode},#{userId},#{roadAddress},#{address},#{addressNickname},(select count(*) from user_address where user_id=#{userId})+1)
	</insert>
	
	<delete id="deleteAddress1" parameterType="map">	<!-- 주소삭제 1단계 작업 -->
		delete from user_address where address_no=#{addressNo} and user_id=#{userId}
	</delete>
	
	<update id="deleteAddress2" parameterType="map">	<!-- 주소삭제 2단계 작업  -->
		update user_address set Address_no=Address_no-1 where Address_no &gt; #{addressNo} and user_id=#{userId}
	</update>

	<select id="checkNickname" parameterType="string" resultType="string">	<!-- 7P 닉네임 중복검사 -->
		select nickname from users where nickname=#{nickname}
	</select>
	
	<select id="checkEmail" parameterType="string" resultType="_int">		<!-- 7P 이메일 중복검사 -->
		select count(*) from user where email=#{email} 
	</select>
	
	<select id="checkPass" parameterType="string" resultType="string" >		<!-- 8P 패스워드를 가져온다 (패스워드 변경또는 로그인시 사용)-->
		select password from user where user_id=#{userId}					<!-- 13P 없으면 아이디틀림, 있는데 컨트롤러에서 검사시 다르면 비밀번호틀림 -->
	</select>
	<update id="updateInviteCount" parameterType="string">	<!-- 8P 로그인시 방문횟수 + 1 -->
		update user set invite_count=invite_count+1 where user_id=#{user_id}
	</update>
	<update id="updatePass" parameterType="map">							<!-- 8P 패스워드를 변경한다 -->
		update user set password=#{password} where user_id=#{userId}
	</update>
	
	<select id="checkId" parameterType="string" resultType="string">	<!-- 아이디 중복검사 -->
		select user_id from users where user_id=#{userId}
	</select>
	
	<select id="checkMobileNumber" parameterType="string" resultType="_int">	<!-- 7P 전화번호 중복검사 -->
		select count(*) from user where mobile_number=#{mobileNumber}
	</select>
	
	<insert id="signup"> <!-- 회원가입 -->
		insert into users (user_id,name,password,mobile_number,nickname,email,dong_id) values (#{userId},#{name},#{password},#{mobileNumber},#{nickname},#{email},#{dongId})
	</insert>

	<select id="getSafePurchaseInfo" parameterType="string" resultType="SafePurchaseInfoDto">	<!-- 11P 안전거래 상세정보 가져오기 -->
				select s.buyer_id,s.transaction_id,s.goods_id,s.goods_title,(select g.user_id  from goods g where g.goods_id= s.goods_id),
				(select name from users  where user_Id=s.buyer_Id) buyer_name,
				(select name from users u1 join goods g1 using(user_id) where g1.goods_id=s.goods_id) seller_name,
				(select user_id from goods g where g.goods_id=s.goods_Id) seller_id,
			   (select u.mobile_number from users u where u.user_id=s.buyer_id) mobile_number, 
               (select u.name from users u where u.user_id=s.buyer_id) name, 
			   s.detail_address,s.road_address, s.price, to_char(s.trading_date, 'YYYY-MM-DD HH24:MI:SS') trading_date, s.trading_status, s.shipping_company ,s.tracking_number 
			   from safe_trading s
			   where transaction_id=#{transactionId}
	</select>
	<update id="acceptSafeTrading" parameterType="string">		<!-- 12P 안전거래 수락, 상품준비중으로 거래상태 업데이트 -->
		update safe_trading 
		set trading_status=2 
		where transaction_id=#{transactionId}
	</update>
	
	<update id="updateTrackingNumber" parameterType="map">		<!-- 12P 안전거래번호와 운송장번호를 인자로하여, 운송장번호와 거래상태 업데이트 -->
		update safe_trading 
		set trading_status=3,tracking_number=#{trackingNumber} ,shipping_company=#{shippingCompany}
		where transaction_id=#{transactionId}
	</update>
	
	<select id="findId" parameterType="map" resultType="string"> <!-- 15P 아이디 찾기 -->
		select user_id from users where name=#{name} and email=#{email}
	</select>
	
	<update id="findPass" parameterType="map"> <!-- 비밀번호찾기 --> <!-- 이메일인증처리 추가해야함 -->
		update users 
		set password=#{password} 
		where user_id=#{userId} and name=#{name} and email=#{email}
	</update>
	
	
	
	
	<!-- 이메일 인증 미구현 -->
	
	
	<insert id="addAccount"> <!-- 계좌등록 -->
		insert into user_account (user_account,user_id) values(#{userAccount},#{userId})
	</insert>
	
	
	
	<update id="updateRole" parameterType="string">	<!-- 유저 안전거래 가능여부 가능변경 -->
		update user set role=1 where user_id=#{userId}
	</update>
	
	<insert id="addDealReview" parameterType="DealReviewDto"> <!-- 거래후기넣기 아직 화면설계없음. -->
		insert into deal_review values(#{goodsId},#{userId},#{message},#{mannerPoint},#{timePoint},#{goodsPoint})
	</insert>
	
	<update id="updateRatingScore" parameterType="map"> <!-- trade-mapper의 거래후기에따른 매너온도 업데이트 -->
		update users set rating_score= rating_score + (#{mannerPoint}+#{timePoint}+#{goodsPoint}-11)/5 
		where user_Id=(select user_Id from goods join safe_trading using (goods_id) where transaction_Id=#{transactionId})
	</update>
	
</mapper>
