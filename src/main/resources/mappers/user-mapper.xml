<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC " -//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="user">
	<select id="getKeepList" parameterType="string" resultType="GoodsDto"> <!--사진API로?--><!-- 5P 사진을 포함한 찜목록을 가져옴 -->
		select goods_id,user_id,title,price,status,created_at 
		from goods
		where goods_id IN(select goods_id from wishlist where user_id=#{userId}) and active_status="Y" and status!=4
		order by created_at DESC
	</select>
	
	<select id="updateViewCount"> <!-- 상품글 조회수 +1 -->
		update goods set view_count=view_count+1
	</select>
	
	<select id="getFavoriteList" parameterType="string" resultType="GoodsDto"> <!--사진API로?--><!-- 6P 사진을 포함한 모아보기목록 가져옴 -->
		select goods_id,user_id,title,price,status,created_at 
		from goods g
		where user_id IN(select target_id from favorite_user where user_id=#{userId}) and active_status="Y" and status!=4
		order by created_at DESC
	</select>
	<select id="getSafePurchaseList" parameterType="string" resultType="SafeTradingDto">	<!-- 9P 안전거래 구매내역(회원) 불러오기 -->
		select 	goods_id,transaction_id,goods_title,trading_status,s.price,trading_date 
		from safe_trading s join goods g using (goods_id)
		where buyer_id=#{buyerId} 
		order by trading_date desc;
	</select>
	
	<select id="getInfacePurchaseList" parameterType="string" resultType="InFaceTradingDto"> <!-- 9P 직거래 구매내역(회원) 불러오기 -->
		select goods_id,in_face_trading_id,goods_title,trading_status,i.price,trading_date 
		from in_face_trading i join goods g using (goods_id)
		where buyer_id=#{buyerId} 
		order by trading_date desc;
	</select>
	<select id="getOnSaleList" parameterType="string" resultType="GoodsDto">	<!--10P 판매중 + 예약중 불러오기 -->
		select goods_id,title,price,status 
		from goods 
		where user_id=#{userId} and status IN(1,2) and active_status="Y" 
		order by refreshed_at DESC;
	</select>
	
	<select id="getSoldOutList" parameterType="string" resultType="GoodsDto">	<!--10P 거래완료 판매내역 가지고오기 -->
		select goods_id,title,price,status 
		from goods 
		where user_id=#{user_id} and status IN(3) and active_status="Y" 
		order by refreshed_at DESC;
	</select>
	
	<select id="getHideList" parameterType="string" resultType="GoodsDto">	<!--10P 숨김중인 판매내역 가져오기 -->
		select goods_id,title,price,status 
		from goods 
		where user_id=#{userId} and status IN(4) and active_status="Y" 
		order by refreshed_at DESC;
	</select>
	<insert id="insertWishList">	<!-- 23P 찜하기 -->	
		insert into wishlist values(#{goodsId},#{userId},"")
	</insert>

	<select id="getProfile" parameterType="string" resultType="UserDto">	<!-- 프로필을 가져올때 유저주소 전부를 가져옴 -->
		select name,rating_score,nickname,mobile_number,from user us where user_id=#{userId}
	</select>
	<select id="getAddress" parameterType="string" resultType="UserAddressDto"> <!-- 사용자 주소를 가져옴 -->
		select detatil_address,post_code,road_address,address,nickname,address_no
		from user_address 
		where user_id=#{userId}
	</select>
	
	<update id="updateMainAddressNo" parameterType="string">	<!-- 대표주소를 변경하기위해 주소순서를 하나씩 뒤로 민다 -->
		update user_address set address_no=address_no+1 from USER_ADDRESS where user_id=#{user_id}
	</update>
	
	<update id="updateMainAddress" parameterType="map">	<!--주소순서를 1로 바꿈으로써 대표주소 변경 -->
		update user_address set address_no=1 from user_address where user_id=#{user_id} and address_no=#{addressNo}+1
	</update>
	
	<insert id="insertAddress" parameterType="UserInsertAddressDto">	<!-- 새로입력된 주소를 count+1 주소순서에 추가한다 -->
		insert into user_address values(#{address},#{detailAddress},#{userId},#{postCode},#{nickname},(select count(*) from user_address where user_id=#{user_id})+1)
	</insert>
	
	<delete id="deleteAddress1" parameterType="_int">	<!-- 주소삭제 1단계 작업 -->
		delete from user_address where post_code=#{postCode}
	</delete>
	
<!-- 	<update id="deleteAddress2" parameterType="_int">	주소삭제 2단계 작업
		update user_address set post_code=post_code-1 where post_code < #{postCode}
	</update>
	 -->
	<select id="checkNickname" parameterType="string" resultType="_int">	<!-- 7P 닉네임 중복검사 -->
		select count(*) from user where nickname=#{nickname}
	</select>
	
	<select id="checkEmail" parameterType="string" resultType="_int">		<!-- 7P 이메일 중복검사 -->
		select count(*) from user where email=#{email} 
	</select>
	
	<select id="checkPass" parameterType="string" resultType="string" >		<!-- 8P 패스워드를 가져온다 (패스워드 변경또는 로그인시 사용)-->
		select password from user where user_id=#{userId}					<!-- 13P 없으면 아이디틀림, 있는데 컨트롤러에서 검사시 다르면 비밀번호틀림 -->
	</select>
	<update id="updateInviteCount" parameterType="string">	<!-- 8P 로그인시 방문횟수 + 1 -->
		update user set invite_count=invite_count+1 where user_id=#{user_id}
	</update>
	<update id="updatePass" parameterType="map">							<!-- 8P 패스워드를 변경한다 -->
		update user set password=#{password} where user_id=#{userId}
	</update>
	
	<select id="checkId" parameterType="string" resultType="_int">	<!-- 아이디 중복검사 -->
		select count(*) from user where user_id=#{userId}
	</select>
	
	<select id="checkMobileNumber" parameterType="string" resultType="_int">	<!-- 7P 전화번호 중복검사 -->
		select count(*) from user where mobile_number=#{mobileNumber}
	</select>
	
	<insert id="signup"> <!-- 회원가입 -->
		insert into user (user_id,name,password,mobile_number,nickname,email) values(#{user_id},#{name},#{password},#{mobile_number},#{nickname},#{email})
	</insert>

	<select id="getSafePurchaseInfo" parameterType="string" resultType="SafePurchaseInfoDto">	<!-- 11P 안전거래 상세정보 가져오기 -->
		select s.goods_id,s.goods_title,(select g.user_id seller_id from goods g where g.goods_id= s.goods_id),
			   s.buyer_id,(select u.mobile_number,u.name from user u where u.user_id=s.buyer_id), 
			   s.shipping_address, s.price, s.trading_date, s.trading_status, s.tracking_number 
			   from safe_trading s
			   where transaction_id=#{transactionId}
	</select>
	<update id="acceptSafeTrading" parameterType="_int">		<!-- 12P 안전거래 수락, 상품준비중으로 거래상태 업데이트 -->
		update safe_trading 
		set trading_status=2 
		where transaction_id=#{transactionId}
	</update>
	
	<update id="updateTrackingNumber" parameterType="map">		<!-- 12P 안전거래번호와 운송장번호를 인자로하여, 운송장번호와 거래상태 업데이트 -->
		update safe_trading 
		set trading_status=3,tracking_number=#{trackingNumber} 
		where transaction_id=#{transactionId}
	</update>
	
	<select id="findId" parameterType="map" resultType="string"> <!-- 15P 아이디 찾기 -->
		select user_id from user where name=#{name} and email=#{email}
	</select>
	
	<update id="findPass" parameterType="map"> <!-- 16P 비밀번호변경 --> <!-- 이메일인증처리 추가해야함 -->
		update user 
		set password=#{password} 
		where user_id=#{userId} and name=#{name} and email=#{email}
	</update>
	
	
	<!-- 이메일 인증 미구현 -->
	
	
	<insert id="addAccount"> <!-- 계좌등록 -->
		insert into user_account (user_account,user_id) values(#{userAccount},#{userId})
	</insert>
	
	<insert id="addFavoriteUser" parameterType="map">	<!-- 유저 즐겨찾기(모아보기) 23P -->
		insert into favorite_user values(#{userId},#{targetId})
	</insert>
	
	<insert id="addDealReview" parameterType="DealReviewDto"> <!-- 거래후기넣기 아직 화면설계없음. -->
		insert into deal_review values(#{goodsId},#{buyerId},#{message},#{mannerPoint},#{timePoint},#{goodsPoint})
	</insert>
	
	<update id="updateRatingScore" parameterType="map"> <!-- trade-mapper의 거래후기에따른 매너온도 업데이트 -->
		update user set rating_score= rating_score + (#{mannerPoint}+#{timePoint}+#{goodsPoint}-11)/5
	</update>
	
</mapper>
